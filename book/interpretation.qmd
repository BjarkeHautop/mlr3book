---
author:
  - name: Przemysław Biecek
    orcid: 0000-0001-8423-1823 
    email: przemyslaw.biecek@gmail.com
    affiliations:
      - name: MI2.AI, Warsaw University of Technology
  - name: Susanne Dandl
    orcid: 0000-0003-4324-4163
    email: dandls.datascience@gmail.com
    affiliations:
      - name: Ludwig-Maximilians-Universität München
      - name: Munich Center for Machine Learning (MCML)
  - name: Giuseppe Casalicchio
    orcid: 0000-0001-5324-5966
    email: giuseppe.casalicchio@stat.uni-muenchen.de
    affiliations:
      - name: Ludwig-Maximilians-Universität München
      - name: Munich Center for Machine Learning (MCML)
      - name: Essential Data Science Training GmbH
abstract: 
  The goal of this chapter is to present key methods that allow in-depth posthoc analysis of an already trained model. 
  The methods presented are model-agnostic, i.e. they can be applied to models of different classes.
  When using predictive models in practice, it is often the case that high performance on a validation set is not enough. 
  Users more and more often want to know which variables are important and how they influence the model's predictions. 
  For the end user, such knowledge allows better utilisation of models in the decision-making process, e.g. by analysing different possible decision options. 
  In addition, if the model's behaviour turns out to be in line with the domain knowledge or the user's intuition then the user's confidence in the prediction will increase. 
  For the modeller, an in-depth analysis of the model allows undesirable model behaviour to be detected and corrected.
---

# Model Interpretation {#sec-interpretation}

{{< include _setup.qmd >}}

Predictive models have numerous applications in virtually every area of life. The increasing availability of data and frameworks to create models has allowed the widespread adoption of these solutions. However, this does not always go together with enough testing of the models and the consequences of incorrect predictions can be severe. The bestseller book ,,Weapons of Math Destruction'' [@ONeil] discusses examples of deployed black-boxes that have led to wrong-headed decisions, sometimes on a massive scale. So what can we do to make our models more thoroughly tested? The answer is methods that allow deeper interpretation of predictive models. In this chapter, we will provide illustrations of how to perform the most popular of these methods [@Holzinger2022].

In principle, all generic frameworks for model interpretation apply to the models fitted with `r mlr3` by just extracting the fitted models from the `r ref("Learner")` objects.

However, two of the most popular frameworks additionally come with some convenience for `r mlr3`, these are

-   `r ref_pkg("iml")` presented in @sec-iml, and
-   `r ref_pkg("DALEX")` presented in @sec-dalex.

Both these packages offer similar functionality, but they differ in design choices. `r ref_pkg("iml")` is based on the R6 class system and for this reason working with it is more similar in style to working with the `r ref_pkg("mlr3")` package. `r ref_pkg("DALEX")` is based on the S3 class system and is mainly focused on the ability to compare multiple different models on the same graph for comparison and on the explainable model analysis process.

<!-- -   `FeatureEffects` computes the effects for all given features on the model prediction. Different methods are implemented: [Accumulated Local Effect (ALE) plots](https://christophm.github.io/interpretable-ml-book/ale.html), [Partial Dependence Plots (PDPs)](https://christophm.github.io/interpretable-ml-book/pdp.html) and [Individual Conditional Expectation (ICE) curves](https://christophm.github.io/interpretable-ml-book/ice.html). -->

<!-- -   `Shapley` computes feature contributions for single predictions with the Shapley value -- an approach from cooperative game theory ([Shapley Value](https://christophm.github.io/interpretable-ml-book/shapley.html)). -->

<!-- -   `FeatureImp` computes the importance of features by calculating the increase in the model's prediction error after permuting the feature (more [here](https://christophm.github.io/interpretable-ml-book/feature-importance.html#feature-importance)). -->

## Penguin Task {#sec-penguin-task}
<!-- TODO: remove this chapter -->

To understand what model interpretation packages can offer, we start with a thorough example. The goal of this example is to figure out the species of penguins given a set of features. The `r ref("palmerpenguins::penguins")` [@palmerpenguins2020] data set will be used which is an alternative to the `iris` data set. The `penguins` data sets contain 8 variables of 344 penguins:

```{r interpretation-001, message=FALSE, warning=FALSE}
data("penguins", package = "palmerpenguins")
str(penguins)
```

To get started run:

```{r interpretation-002, message=FALSE, warning=FALSE}
library("mlr3")
library("mlr3learners")
set.seed(1)
```

```{r interpretation-003, message=FALSE, warning=FALSE}
penguins = na.omit(penguins)
task_peng = as_task_classif(penguins, target = "species")
```

`penguins = na.omit(penguins)` is to omit the 11 cases with missing values. If not omitted, there will be an error when running the learner from the data points that have N/A for some features.

```{r interpretation-004, message=FALSE, warning=FALSE}
learner = lrn("classif.ranger")
learner$predict_type = "prob"
learner$train(task_peng)
learner$model
x = penguins[which(names(penguins) != "species")]
```

As explained in Section [Learners](#learners), specific learners can be queried with `r ref("mlr_learners")`. In Section [Train/Predict](#train-predict) it is recommended for some classifiers to use the `predict_type` as `prob` instead of directly predicting a label. This is what is done in this example. `penguins[which(names(penguins) != "species")]` is the data of all the features and `y` will be the penguins`species`. `learner$train(task_peng)` trains the model and `learner$model` stores the model from the training command.

## The `iml` Package {#sec-iml}

The `r ref_pkg("iml")` package @Molnar2018 provides a unified interface for many model-agnostic interpretation methods.
Model-agnostic interpretation methods can be applied to any machine learning model without any restriction to a specific model class.
The `r ref_pkg("iml")` package is based on the R6 class system just like the `r ref_pkg("mlr3")` package.
It provides a unified interface to different interpretation methods to simplify the analysis and interpretation of machine learning models.
<!-- The implemented methods internally originate from the same parent class and use the same processing framework. -->
<!-- Thus, calls to each interpretation method follow the same syntax and also the output and functionalities are consistent (for example, all methods have a `$plot()` method).  -->
<!-- This makes it easy to analyse machine learning models using multiple interpretation tools. -->

Below, we provide examples on how to use the `r ref_pkg("iml")` package to give insights into the random forest model we fitted above with the `r ref_pkg("mlr3")` package.
We use the methods that were briefly introduced in the beginning of @sec-interpretation: 
permutation feature importance, partial dependence plots and Shapley values. 
We also briefly discuss which additional methods are available in the `r ref_pkg("iml")` package.
<!-- or a subpackage of it, namely, global, local surrogate models and counterfactual explanations. -->

### The Predictor object

In order for the interpretation methods in the `r ref_pkg("iml")` package to support machine learning models (for classification or regression) fitted by *any* R package, fitted models need to be wrapped in a `r ref("iml::Predictor")` object.
A `r ref("iml::Predictor")` contains the prediction model and the data used for analyzing the model and producing the desired explanation.

Depending on the insights we want to get from the interpretation method or the question we want to answer with it, the data set can be the training data or test data not used for training the model to be analyzed (see  @subsec-iml-testdata for details). 
To illustrate the technical application of the package, we will just use the training data:
<!-- TODO: use test data instead? -->

```{r iml-Predictor, message=FALSE, warning=FALSE, fig.cap='Plot of the results from FeatureEffects. FeatureEffects computes and plots feature effects of prediction models',  fig.align='center'}
library("iml")
predictor = Predictor$new(learner, data = x, y = penguins$species)
```

::: {.callout-tip}
`r ref("iml::Predictor")` has an (optional) input argument `predict.function` which requires a function that predicts on new data. 
For models fitted with the packages `r ref_pkg("mlr3")`, `r ref_pkg("mlr")` or `r ref_pkg("caret")`, a default `predict.function` is already implemented in the `r ref_pkg("iml")` package and the `predict.function` argument is not required to be specified.
For models fitted with any other package, the model-specific `predict` function of that package is used by default. 
Passing a custom `predict.function` to unify the output of the model-specific `predict` function might be necessary for some packages.
This is especially needed if the model-specific `predict` function does not produce a vector of predictions (in case of regression tasks or classification tasks that predict discrete classes instead of probabilities) or a `data.frame` with as many columns as class labels (in case of classification tasks that predict a probability for each class label).
<!-- This argument only needs to be specified if the model was not built with the `r ref_pkg("mlr3")`, `r ref_pkg("mlr")` or `r ref_pkg("caret")` packages.  -->
<!-- Since the random forest (`learner`) was fitted with `r ref_pkg("mlr3")`, `predict.function` is already implemented in the `r ref_pkg("iml")` package and does not need to be specified by us. -->
:::



### Permutation Feature Importance

First, we analyse which features are the most important features to classify penguins with the random forest `model` according to the permutation feature importance method. 
The importance of a feature is measured as the factor by which the model's prediction error increases when the feature is shuffled. 
We initialize a `r ref("iml::FeatureImp")` object with the `model` as an input and the loss

```{r iml-007, message=FALSE, warning=FALSE, fig.height=3, fig.cap='Feature importances computed with the PFI method implemented in `iml::FeatureImp` for the penguin classification task and random forest model.',  fig.align='center'}
effect = FeatureImp$new(predictor, loss = "ce")
effect$plot(features = num_features)
```

With the `$plot()` method, we can visualize the importances. We see that the bill length is the most important feature. If we permute the column bill length in the training data, the classification error of our model increases on average by a factor of around 90. We say on average because `r ref("iml::FeatureImp")` repeats per default the shuffling process 5 times and each time the classification error is computed. The point on the plot for bill length displays the median of the 5 resulting error values and the boundaries of the error bar are equal to the 5 % and 95 % quantiles of the error values.

### Partial Dependence Plot

Next, we inspect *how* bill length influences the penguin classification. Therefore, we compute feature effects using a partial dependence plot (PDP).

```{r iml-pdp, message=FALSE, warning=FALSE, fig.height=3, fig.cap='Feature effect of bill length computed with the PDP method implemented in `iml::FeatureEffect` for the penguin classification task and random forest model.',  fig.align='center'}
effect = FeatureEffect$new(predictor, feature = "bill_length_mm", method = "pdp")
effect$plot()
```

Again, we used the `$plot()` method to visualize the results. We see that when the bill length is smaller than roughly 40 mm, there is a high chance that the penguin is an Adelie.

<!-- We can also compute and visualize the feature effects of all numeric features at once with `r ref("iml::FeatureEffects")`.  -->

<!-- ```{r iml-pdp2, message=FALSE, warning=FALSE, fig.cap='Feature effects of all numeric features computed with the PDP method implemented in `iml::FeatureEffect` for the penguin classification task and random forest model.',  fig.align='center'} -->

<!-- num_features = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g", "year") -->

<!-- effect = FeatureEffects$new(predictor, features = num_features, method = "pdp") -->

<!-- effect$plot() -->

<!-- ``` -->

<!-- All numeric features except for study `year` (either 2007, 2008 or 2009) provide meaningful interpretable information. -->

### Global surrogate model

Global surrogate models approximate the (often) very complex machine learning model by an interpretable one. Appropriate surrogate models are, for example, decision trees or linear models whose tree structure or coefficients can be easily interpreted. The surrogate model is either trained on the same data as the black box model or on a new data set with the same distribution. As response variable for the surrogate, not the true outcome (if any exists in the data set) but the predictions obtained from the black-box model are used. With `r ref("iml::TreeSurrogate")` we can fit a tree-based surrogate model (fitted with the `r ref_pkg("partykit")` package) to the predictions of a prediction model.

```{r iml-globalsurrogate, message=FALSE, warning=FALSE, fig.cap='Global surrogate model implemented in `iml::TreeSurrogate` for the penguin classification task and random forest model. Plot from the internal `$plot()` method.',  fig.align='center'}
treesurrogate = TreeSurrogate$new(predictor, maxdepth = 2L)
treesurrogate$plot()
```

By default, the plot method of `r ref("iml::TreeSurrogate")` shows the distribution of the predicted outcomes from the underlying machine learning model (not the tree) for each leaf node. To visualize the underlying tree, `plot()` must be directly applied to the fitted tree saved in `tree` field of the fitted `r ref("iml::TreeSurrogate")` object.

```{r iml-globalsurrogate-tree, message=FALSE, warning=FALSE, fig.height=8, fig.cap='Global surrogate model implemented in `iml::TreeSurrogate` for the penguin classification task and random forest model. Plot of the underlying tree.',  fig.align='center'}
plot(treesurrogate$tree)
```

If a penguin comes from the Biscoe island, the model derives the species based on the flipper length. If a penguin comes from the other islands, the model determines the species from the bill length. It is important to note that statements such as "the bill length and the island determine the species" are in general not valid, since the surrogate model never sees the real outcomes of the underlying data. Consequently, the conclusions drawn from the surrogate model only hold for the prediction model (if the approximation is accurate). We can only draw conclusions on the data if the surrogate model approximates the prediction model accurately and the prediction model accurately predicts the species.

To evaluate whether the surrogate model approximates the prediction model accurately, we can use a cross table comparing the predicted class of the random forest and the surrogate tree.

```{r iml-crosstable, message=FALSE, warning=FALSE}
predlabeltree = treesurrogate$predict(x, type = "class")[,1]
predlabelrf = learner$predict_newdata(x)$response
table(predlabeltree, predlabelrf)
```

Mostly, the black-box predicted class and the surrogate predicted classes overlap.

### Local surrogate model

Instead of explaining the model globally with a global surrogate model, we can also explain individual predictions using a local surrogate model. The underlying idea is that while it is very difficult to approximate the whole model with an interpretable one, it is much simpler if we only do so for a small area in the feature space surrounding a specific point -- the point of interest. To receive a local surrogate model, the following steps are necessary:

1.  We obtain predictions from the black-box model for a given data set.
2.  We weight the observations in this data set by their proximity to our point of interest.
3.  We fit an interpretable model on the weighted data set using the prediction as a response variable.
4.  We interpret the surrogate model to explain the prediction of our point of interest.

How can we approach this with the `r ref_pkg("iml")` package? First, we select a data point we want to explain. Here, we use Steve, the first penguin in the data set. For Steve, the model predicts the class Adelie with 99 % probability.

```{r steve,  message=FALSE, warning=FALSE}
steve = penguins[1, which(names(penguins) != "species")]
model$predict(steve)
```

Next, we use `r ref("iml::LocalModel")` to fit a locally weighted linear regression model to explain why Steve was classified as Adelie. The surrogate model is penalized such that only a given number `k` is used. The default is `k = 3L`.

```{r iml-localsurrogate,  fig.height=3, message=FALSE, warning=FALSE, fig.cap='Local surrogate model implemented in `iml::LocalModel` for the first penguin in the data set and a random forest model.', fig.align = 'center'}
localsurrogate = LocalModel$new(predictor, steve)
localsurrogate$plot()
```

Compared to the global surrogate model, the local surrogate does not have to be accurate w.r.t. the prediction of the black-box model on the whole data set but only w.r.t. to the prediction of the black-box model on the local neighborhood of the point of interest.

::: callout-tip
Local surrogate models should be interpreted with caution: Which data is used to build the surrogate model and how the observations are weighted has a huge effect on the performance.
:::

### Shapley

In the introduction, we introduced another local explanation method: Shapley values. Shapley values reveal how much each feature contributed to the prediction compared to the average prediction obtained for a given data set. Compared to the penalized, linear model as a local surrogate model, Shapley values guarantee that the prediction is fairly distributed among the features.

With the help of `r ref("iml::Shapley")`, we now generate Shapley values for Steve's prediction. Again, the results can be visualized with the `$plot()` method.

```{r iml-006, message=FALSE, warning=FALSE,  fig.height=3, fig.cap='Shapley values implemented in `iml::Shapley` for the first penguin in the data set and a random forest model.',  fig.align='center'}
shapley = Shapley$new(predictor, x.interest = steve)
plot(shapley)
```

If we focus on the plot for `Adelie`, the $\phi$s of the features show us how to fairly distribute the difference of Steve's probability to be Adelie to the data set average probability to be Adelie among the given features. Steve's bill length of 39.1 mm has the most positive effect on the probability of being an Adelie, with an increase in the predicted probability of more than 20 %.

### Independent Test Data {#subsec-iml-testdata}

It is also interesting to see how well the model performs on a test data set. For this section, 2/3 of the penguin data set will be used for the training set and 1/3 for the test set (default of the holdout method in `r ref("mlr3::resample")`):

```{r iml-008, message=FALSE, warning=FALSE}
train_set = sample(task_peng$nrow, 2/3 * task_peng$nrow)
test_set = setdiff(seq_len(task_peng$nrow), train_set)
learner$train(task_peng, row_ids = train_set)
prediction = learner$predict(task_peng, row_ids = test_set)
```

First, we compare the feature importance on training and test set

```{r iml-009, message=FALSE, warning=FALSE,  fig.height=3, fig.cap='FeatImp on train (left) and test (right)',  fig.align='center'}
# plot on training
model = Predictor$new(learner, data = penguins[train_set, ], y = "species")
effect = FeatureImp$new(predictor, loss = "ce")
plot_train = effect$plot()

# plot on test data
model = Predictor$new(learner, data = penguins[test_set, ], y = "species")
effect = FeatureImp$new(predictor, loss = "ce")
plot_test = effect$plot()

# combine into single plot
library("patchwork")
plot_train + plot_test
```

In both cases, the bill lengths is the most important feature. Since all other features have similar, much lower importance values, the ranking between training and test data slightly changes. The magnitude of values differs between training and test data. For test data FI values of $>$ 15 are measured while for train data the values are $\le$ 0.3. This is because fitting a model means that the model parameters are adapted to have low prediction error on the training data.

We follow a similar approach to compare the feature effects:

```{r iml-010, message=FALSE, warning=FALSE, fig.cap='FeatEffect train data set', fig.align='center'}
num_features = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g", "year")
model = Predictor$new(learner, data = penguins[train_set, ], y = "species")
effect = FeatureEffects$new(predictor, method = "pdp")
plot(effect, features = num_features)
```

```{r iml-011, message=FALSE, warning=FALSE, fig.cap='FeatEffect test data set',  fig.align='center'}
model = Predictor$new(learner, data = penguins[test_set, ], y = "species")
effect = FeatureEffects$new(predictor, method = "pdp")
plot(effect, features = num_features)
```

As is the case with `FeatureImp`, the test data results are similar to the training results but the magnitude of effects differs slightly. This would be a good opportunity for the reader to inspect the effect of varying amounts of features and the amount of data used for both the test and train data sets on `FeatureImp` and `FeatureEffects`.

### counterfactuals {#sec-counterfactuals}

The `r ref_pkg("counterfactuals")` package is a subpackage of the `r ref_pkg("iml")` package for methods that generate counterfactual explanations, or short counterfactuals. Counterfactual explanations explain the prediction of a data point by presenting which minimal changes in the point are sufficient to receive a different, desired outcome.

An example for a counterfactual for the `r ref("palmerpenguins::penguins")` data would be: "If the penguin has a bill length of 45 mm instead of 35 mm and a flipper length of 210 mm instead of 180 mm, the penguin would have been classified as Gentoo with a probability of \> 50 %" (@fig-counterfactuals-penguins). By revealing the feature changes that alter a decision, the counterfactuals reveal which features are the key drivers for a decision.

```{r interpretation-counterfactuals-fig, echo=FALSE, out.width = '50%', fig.align='center'}
#| label: fig-counterfactuals-penguins
#| fig-cap: Illustration of a counterfactual explanation. The blue dot displays a counterfactual for a given point (brown dot) which proposed changes in bill and flipper length such that the prediction changes from Adelie to Gentoo with > 50 \% probability.
#| fig-alt: Illustration of counterfactual explanations. Two dots are shown one that is the point whose prediction we want to explain and the other is it's counterfactual. The counterfactual proposes to increase the bill and flip length such that the point is classified as a Gentoo instead of Adelie with a probability of more than 50 \%.
knitr::include_graphics("Figures/counterfactuals_penguins.png")
```

Many methods were proposed in previous years to generate counterfactual explanations. These methods differ in what targeted properties their generated counterfactuals have (for example, are the feature changes actionable?) and with which method (for example, should a set of counterfactuals be returned in a single run?). Due to the variety of methods, counterfactual explanations were outsourced into a separate package instead of integrating these methods into the `r ref_pkg("iml")` package. Currently, three methods are implemented in the R package but the R6-based interface makes it easy to add other counterfactual explanation methods in the future.

#### The What-If method

In the following, we focus on the simplest method among the three implemented ones: the What-If approach [@Wexler2019]. For a data point, whose prediction should be explained, the returned counterfactual is equal to the closest data point of a given data set (for example, the training data) with the desired prediction. To illustrate the overall workflow of the package, we generate counterfactuals for Steve, the first penguin in the data set.

The `r ref_pkg("counterfactuals")` package relies on `r ref("iml::Predictor()")` as a model wrapper and can, therefore, (as the `r ref_pkg("iml")`) package) explain any prediction model fitted with the `r ref_pkg("mlr3")` package including the random forest `model` we trained above.

```{r interpretation-predictsteve, message=FALSE, warning=FALSE}
model$predict(steve)
```

The random forest predicts that Steve is with 99 % Adelie. The What-If method answers how the features need to be changed such that Steve is classified as Gentoo with a probability of more or equal to 80 %. Since we have a classification `model` we initialize a `r ref("counterfactuals::WhatIfClassif()")` object. By calling `$find_counterfactuals()`, we generate a counterfactual for Steve.

```{r interpretation-whatif, message=FALSE, warning=FALSE}
library("counterfactuals")
whatif = WhatIfClassif$new(predictor, n_counterfactuals = 1L)
ranger_cfexp = whatif$find_counterfactuals(steve, desired_class = "Gentoo", 
  desired_prob = c(0.5, 1))
```

#### The Counterfactuals object

`ranger_cfexp`is a `r ref("counterfactuals::Counterfactuals")` object which offers many visualization and evaluation methods. For example, `$evaluate(show_diff = TRUE)` shows how the features need to be changed.

```{r interpretation-whatifevaluation, message=FALSE, warning=FALSE}
ranger_cfexp$evaluate(show_diff = TRUE)
```

To receive a probability of more than 80 % for Gentoo the bill length, flipper length, and body mass are enlarged while the bill depth is shortened. Furthermore, Steve must come from Biscoe island instead of Torgersen. For year born and sex no changes are required. Additional columns reveal the quality of the counterfactuals, for example, the number of required features changes (`no_changed`) or the distance to the closest training data point (`dist_train`) which is 0 because the counterfactual \textit{is} a training point.

Instead of a single counterfactual, we can also generate multiple ones with `r ref("counterfactuals::WhatIfClassif()")` by setting the `n_counterfactuals` parameter to a number \> 1, for example, 5.

```{r interpretation-whatifmulti, message=FALSE, warning=FALSE}
library("counterfactuals")
whatif_multi = WhatIfClassif$new(predictor, n_counterfactuals = 5L)
ranger_cfexp_multi = whatif_multi$find_counterfactuals(steve, 
  desired_class = "Gentoo", desired_prob = c(0.8, 1))
```

For a concise overview of the required feature changes of the five counterfactuals, we can use the `$parallel_plot()` method. The blue line corresponds to the original feature values of Steve, while the gray line displays the counterfactual.

```{r interpretation-whatifparallel, message=FALSE, warning=FALSE, fig.height=4, out.width = '90%', fig.align='center'}
ranger_cfexp_multi$plot_parallel()
```

The agreement of all five counterfactuals that bill length, flipper length, and body mass need to be increased and bill depth decreased for a label flip from Adelie to Gentoo, assures that these features are indeed major drivers for the decision.

## DALEX {#sec-dalex}

The `r ref_pkg("DALEX")` [@Biecek2018] package belongs to [DrWhy](https://www.drwhy.ai/) family of solutions created to support the responsible development of machine learning models. It implements the most common methods for explaining predictive models using posthoc model agnostic techniques. You can use it for any model built with the `r ref_pkg("mlr3")` package as well as with other frameworks in `R`. The counterpart in `Python` is the library `dalex` [@Baniecki2021].

The philosophy of working with `r ref_pkg("DALEX")` package is based on the process of explanatory model analysis described in the [EMA book](https://ema.drwhy.ai/) [@biecek_burzykowski_2021]. In this chapter, we present code snippets and a general overview of this package. For illustrative purposes, we reuse the `learner` model built in the @sec-penguin-task on `r ref("palmerpenguins::penguins")` data.

Once you become familiar with the philosophy of working with the `r ref_pkg("DALEX")` package, you can also use other packages from this family such as `r ref_pkg("fairmodels")` [@Wisniewski2022] for detection and mitigation of biases, `r ref_pkg("modelStudio")` [@Baniecki2019] for interactive model exploration, `r ref_pkg("modelDown")` [@Romaszko2019] for the automatic generation of IML model documentation in the form of a report, `r ref_pkg("survex")` [@Krzyzinski2023] for the explanation of survival models, or `r ref_pkg("treeshap")` for the analysis of tree-based models.

### Explanatory model analysis {#sec-interpretability-architecture}

The analysis of a model is usually an interactive process starting with a shallow analysis -- usually a single-number summary. Then in a series of subsequent steps, one can systematically deepen understanding of the model by exploring the importance of single variables or pairs of variables to an in-depth analysis of the relationship between selected variables to the model outcome. See @Bucker2022 for a broader discussion of what the model exploration process looks like.

This explanatory model analysis (EMA) process can focus on a single observation, in which case we speak of local model analysis, or for a set of observations, in which case we speak of global data analysis. Below, we will present these two scenarios in separate subsections. See @fig-dalex-fig-plot-01 for an overview of key functions that will be discussed.

```{r interpretation-012, echo=FALSE, fig.cap='Taxonomy of methods for model exploration presented in this chapter. Left part overview methods for global level exploration while the right part is related to local level model exploration.', out.width = '92%', fig.align='center'}
#| label: fig-dalex-fig-plot-01
knitr::include_graphics("Figures/DALEX_ema_process.png")
```

Predictive models in R have different internal structures. To be able to analyse them systematically, an intermediate object -- a wrapper -- is needed to provide a consistent interface for accessing the model. Working with explanations in the `r ref_pkg("DALEX")` package always starts with the creation of such a wrapper with the use of the `r ref("DALEX::explain()")` function. This function has several arguments that allow the model created by the various frameworks to be parameterised accordingly. For models created in the `r mlr3` package, it is more convenient to use the `r ref("DALEXtra::explain_mlr3()")`.

```{r interpretation-019, message=FALSE, warning=FALSE}
library("DALEX")
library("DALEXtra")

ranger_exp = DALEX::explain(learner,
  data = penguins[test_set, ],
  y = penguins[test_set, "species"],
  label = "Ranger Penguins",
  colorize = FALSE)
```

The `r ref("DALEX::explain()")` function performs a series of internal checks so the output is a bit verbose. Turn the `verbose = FALSE` argument to make it less wordy.

### Global level exploration {#sec-interpretability-dataset-level}

The global model analysis aims to understand how a model behaves on average on a set of observations, most commonly a test set. In the `r ref_pkg("DALEX")` package, functions for global analysis have names starting with the prefix `model_`.

#### Model Performance

As shown in Figure @fig-dalex-fig-plot-01, it starts by evaluating the performance of a model. This can be done with a variety of tools, in the `r ref_pkg("DALEX")` package the default is to use the `r ref("DALEX::model_performance")` function. Since the `explain` function checks what type of task is being analysed, it can select the appropriate performance measures for it. In our illustration, we have a multi-label classification, so measures such as micro-aggregated F1, macro-aggregated F1 etc. are calculated in the following snippet. One of the calculated measures is cross entropy and it will be used later in the following sections.

Each explanation can be drawn with the generic `plot()` function, for multi-label classification the distribution of residuals is drawn by default.

```{r interpretation-020a, message=FALSE, warning=FALSE, fig.width=6, fig.height=5, out.width = '60%', fig.align='center'}
perf_penguin = model_performance(ranger_exp)
perf_penguin

library("ggplot2")
old_theme = set_theme_dalex("ema") 
plot(perf_penguin)
```

The task of classifying the penguin species is rather easy, which is why there are so many values of 1 in the performance assessment of this model.

#### Permutational Variable Importance

A popular technique for assessing variable importance in a model-agnostic manner is the permutation variable importance. It is based on the difference (or ratio) in the selected loss function after the selected variable or set of variables has been permuted. Read more about this technique in [Variable-importance Measures](https://ema.drwhy.ai/featureImportance.html) chapter.

The `r ref("DALEX::model_parts()")` function calculates the importance of variables and its results can be visualized with the generic `plot()` function.

```{r interpretation-021, message=FALSE, warning=FALSE, fig.width=8, fig.height=4, out.width = '90%', fig.align='center'}
ranger_effect = model_parts(ranger_exp)
head(ranger_effect)

plot(ranger_effect, show_boxplots = FALSE) 
```

The bars start in loss (here cross-entropy loss) for the selected data and end in a loss for the data after the permutation of the selected variable. The more important the variable, the more the model will lose after its permutation.

#### Partial Dependence

Once we know which variables are most important, we can use [Partial Dependence Plots](https://ema.drwhy.ai/partialDependenceProfiles.html) to show how the model, on average, changes with changes in selected variables.

The `r ref("DALEX::model_profile()")` function calculates the partial dependence profiles. The `type` argument of this function also allows *Marginal profiles* and *Accumulated Local profiles* to be calculated. Again, the result of the explanation can be model_profile with the generic function `plot()`.

```{r interpretation-024, message=FALSE, warning=FALSE, fig.width=8, fig.height=7, out.width = '90%', fig.align='center'}
ranger_profiles = model_profile(ranger_exp)
ranger_profiles

plot(ranger_profiles) + 
  theme(legend.position = "top") + 
  ggtitle("Partial Dependence for Penguins","")
```

For the multi-label classification model, profiles are drawn for each class separately by indicating them with different colours. We already know which variable is the most important, so now we can read how the model result changes with the change of this variable. In our example, based on `bill_length_mm` we can separate *Adelie* from *Chinstrap* and based on `flipper_length_mm` we can separate *Adelie* from *Gentoo*.

### Local level explanation {#sec-interpretability-instance-level}

The local model analysis aims to understand how a model behaves for a single observation. In the `r ref_pkg("DALEX")` package, functions for local analysis have names starting with the prefix `predict_`.

We will carry out the following examples using Steve the penguin of the `Adelie` species as an example.

```{r interpretation-025a, message=FALSE, warning=FALSE}
steve = penguins[1,]
steve
```

#### Model Prediction

As shown in Figure @fig-dalex-fig-plot-01, the local analysis starts with the calculation of a model prediction.

For Steve, the species was correctly predicted as `Adelie` with high probability.

```{r interpretation-025, message=FALSE, warning=FALSE}
predict(ranger_exp, steve)
```

#### Break Down

A popular technique for assessing the contributions of variables to model prediction is Break Down (see [Introduction to Break Down](https://ema.drwhy.ai/breakDown.html) chapter for more information about this method).

The function `r ref("DALEX::predict_parts()")` function calculates the attributions of variables and its results can be visualized with the generic `plot()` function.

```{r interpretation-027, message=FALSE, warning=FALSE, fig.width=8, fig.height=5.5, out.width = '90%', fig.align='center'}
ranger_attributions = predict_parts(ranger_exp, new_observation = steve)
plot(ranger_attributions) + ggtitle("Break Down for Steve") 
```

Looking at the plots above, we can read that the biggest contributors to the final prediction were for Steve the variables bill length and flipper.

#### Shapley Values

By far the most popular technique for local model exploration [@Holzinger2022] is Shapley values and the most popular algorithm for estimating these values is the SHAP algorithm. Find a detailed description of the method and algorithm in the chapter [SHapley Additive exPlanations (SHAP)](https://ema.drwhy.ai/shapley.html).

The function `r ref("DALEX::predict_parts()")` calculates SHAP attributions, you just need to set `type = "shap"`. Its results can be visualized with a generic `plot()` function.

```{r interpretation-028, message=FALSE, warning=FALSE, fig.width=8, fig.height=5.5, out.width = '90%', fig.align='center'}
ranger_shap = predict_parts(ranger_exp, new_observation = steve, 
             type = "shap")
plot(ranger_shap, show_boxplots = FALSE) + 
             ggtitle("Shapley values for Steve", "") 
```

The results for Break Down and SHAP methods are generally similar. Differences will emerge if there are many complex interactions in the model.

#### Ceteris Paribus

In the previous section, we've introduced a global explanation -- Partial Dependence plots. Ceteris Paribus plots are the local level version of that plot. Read more about this technique in the chapter [Ceteris Paribus](https://ema.drwhy.ai/ceterisParibus.html) and note that these profiles are also called Individual Conditional Expectations (ICE). They show the response of a model when only one variable is changed while others stay unchanged.

The function `r ref("DALEX::predict_profile()")` calculates Ceteris paribus profiles which can be visualized with the generic `plot()` function.

```{r interpretation-029, message=FALSE, warning=FALSE, fig.width=8, fig.height=6, out.width = '90%', fig.align='center'}
ranger_ceteris = predict_profile(ranger_exp, steve)
#plot(ranger_ceteris) + ggtitle("Ceteris paribus for Steve", " ") 
```

Blue dot stands for the prediction for Steve. Only a big change in bill length could convince the model of Steve's different species.

## Exercises

Model explanation allows us to confront our expert knowledge related to the problem with relations learned by the model. Following tasks are based on predictions of the value of football players based on data from the FIFA game. It is a graceful example, as most people have some intuition about how a footballer's age or skill can affect their value. The latest FIFA statistics can be downloaded from [kaggle.com](https://www.kaggle.com/), but also one can use the 2020 data avaliable in the `DALEX` packages(see `DALEX::fifa` data set). The following exercises can be performed in both the `iml` and `DALEX` packages and we have provided solutions for both.

1.  Prepare a `mlr3` regression task for `fifa` data. Select only variables describing the age and skills of footballers. Train any predictive model for this task, e.g. `regr.ranger`.

2.  Use the permutation importance method to calculate variable importance ranking. Which variable is the most important? Is it surprising?

3.  Use the Partial Dependence profile to draw the global behavior of the model for this variable. Is it aligned with your expectations?

4 Choose one of the football players. You can choose some well-known striker (e.g. Robert Lewandowski) or a well-known goalkeeper (e.g. Manuel Neuer). The following tasks are worth repeating for several different choices.

5.  For the selected footballer, calculate and plot the Shapley values. Which variable is locally the most important and has the strongest influence on the valuation of the footballer?

6.  For the selected footballer, calculate the Ceteris Paribus / Individual Conditional Expectatons profiles to draw the local behaviour of the model for this variable. Is it different from the global behaviour?
